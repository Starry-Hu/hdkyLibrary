<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
    
	<!-- 扫描外部配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="200" />
		<property name="minPoolSize" value="20" />
		<property name="acquireIncrement" value="5" />
		<property name="initialPoolSize" value="20" />
		<property name="maxIdleTime" value="60" />
		<property name="idleConnectionTestPeriod" value="60" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 开启注解事务管理，在需要开启事务管理的类上，加上相应的注解 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="register*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			<tx:method name="set*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="cn.edu.hdky.library.dao*"></property>
    </bean> 
    
    <!-- 开启注解事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <context:component-scan base-package="cn.edu.hdky.library.service.impl"></context:component-scan>
    
     <!-- Shiro 的Web过滤器 -->
	<!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证
		<property name="loginUrl" value="/admin/adminLogin" />
		认证成功统一跳转到index.do，建议不配置，shiro认证成功自动到上一个请求路径
		<property name="successUrl" value="/index.action"/>
		通过unauthorizedUrl指定没有权限操作时跳转页面
		<property name="unauthorizedUrl" value="/manage/index.html" />
		过虑器链定义，从上向下顺序执行，一般将/**放在最下边
		<property name="filterChainDefinitions">
		  如果当前请求的url匹配下面的某个url模式，将会执行其配置的拦截器。 
                	比如： anon拦截器表示匿名访问（即不需要登录即可访问） 
                    authc拦截器表示需要身份认证通过后才能访问 
                    roles[admin]拦截器表示需要有admin角色授权才能访问 
                    perms["user:create"]拦截器表示需要有"user:create"权限才能访问。
			<value>
				/** = authc 所有url都必须认证通过才可以访问
				/admin/adminLogout = logout   退出登录，直接指定拦截路径，之后无需写退出登录的控制器，即controller
                /admin/adminLogin = anon
                /manage/login.html = anon
				/manage/** = authc
				/** = anon所有url都可以匿名访问
			</value>
		</property>
    </bean>     -->
    <!-- securityManager安全管理器 -->
	<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="realm" ref="userRealm" />
	</bean>     -->
    
    <!-- realm -->
	<!-- <bean id="userRealm" class="com.QEcode.ssm.realm.UserRealm">
		将凭证匹配器设置到realm中，realm按照凭证匹配器的要求进行散列
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
	</bean>   -->
	<!-- shiro 管理的session dao -->
   <!--  <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO" />
    
     <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO" />
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean> --> 

    
</beans>